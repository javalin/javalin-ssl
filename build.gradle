plugins {
    id('java-library')
    id('maven-publish')
    id('jacoco')
    id('io.freefair.lombok') version '8.1.0'
    id('signing')
    id('io.github.gradle-nexus.publish-plugin') version '1.3.0'
}

group = 'io.javalin.community.ssl'
//Must be formatted following the RegEx: /version\s*=\s*'\S+'/g
version = '5.6.2'

jacoco {
    toolVersion = '0.8.8'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.reposilite.com/snapshots" //Javalin Snapshots
    }
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/intTest/java'
        }
        resources {
            srcDir 'src/intTest/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    def javalin = "5.6.2"
    def junit = '5.10.0'
    def sslContextKickstart = '8.1.6'
    def okhttp = "4.11.0"
    def annotations = "24.0.1"

    compileOnly("org.jetbrains:annotations:$annotations")

    compileOnly("io.javalin:javalin:$javalin")
    implementation(platform("io.javalin:javalin-parent:$javalin")) //Javalin BOM

    implementation("org.eclipse.jetty.http2:http2-server")
    implementation("org.eclipse.jetty:jetty-alpn-conscrypt-server")
    implementation("org.eclipse.jetty:jetty-alpn-java-server")
    //implementation("org.eclipse.jetty.http3:http3-server")

    implementation("io.github.hakky54:sslcontext-kickstart:$sslContextKickstart")
    implementation("io.github.hakky54:sslcontext-kickstart-for-jetty:$sslContextKickstart")
    implementation("io.github.hakky54:sslcontext-kickstart-for-pem:$sslContextKickstart")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit")

    integrationTestImplementation("io.javalin:javalin:$javalin")
    integrationTestImplementation(platform("io.javalin:javalin-parent:$javalin"))

    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart:$sslContextKickstart")
    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart-for-jetty:$sslContextKickstart")
    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart-for-pem:$sslContextKickstart")

    integrationTestImplementation('org.slf4j:slf4j-simple')
    integrationTestImplementation("org.eclipse.jetty.http2:http2-server")
    integrationTestImplementation("org.eclipse.jetty:jetty-alpn-java-server")
    integrationTestImplementation("org.eclipse.jetty:jetty-alpn-conscrypt-server")

    integrationTestImplementation("com.squareup.okhttp3:okhttp:$okhttp")
    integrationTestImplementation("com.squareup.okhttp3:okhttp-tls:$okhttp")
    integrationTestImplementation("org.junit.jupiter:junit-jupiter-api:$junit")


    integrationTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit")
}

publishing {
    repositories {
        maven {
            name = "reposilite"

            def releasesRepoUrl = uri("https://maven.reposilite.com/releases")
            def snapshotsRepoUrl = uri("https://maven.reposilite.com/snapshots")

            url = version.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("MAVEN_NAME") ?: property("mavenUser").toString()
                password = System.getenv("MAVEN_TOKEN") ?: property("mavenPassword").toString()
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = rootProject.name
            version = project.version

            from components.java

            pom {
                name = 'Javalin SSL Plugin'
                description = 'Straightforward SSL Configuration for Javalin!'
                url = 'https://javalin.io/plugins/ssl-helpers'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'zugazagoitia'
                        name = 'Alberto Zugazagoitia'
                        email = 'alberto@zugazagoitia.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/javalin/javalin-ssl.git'
                    developerConnection = 'scm:git:ssh://github.com:javalin/javalin-ssl.git'
                    url = 'https://github.com/javalin/javalin-ssl'
                }
            }
        }
    }
}


signing {
    if (project.findProperty("signingKey")) {
        useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))
    } else {
        useGpgCmd()
    }
    sign publishing.publications.maven
}
nexusPublishing {
    repositories {
        sonatype()
    }
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

tasks.register("integrationTests", Test) {
    description = 'Runs the integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter test

    outputs.upToDateWhen { false }

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
    }

    useJUnitPlatform {
        includeTags "integration"
    }

    finalizedBy integrationTestsCoverageReport

}

tasks.register('integrationTestsCoverageReport', JacocoReport) {
    description = 'Generates code coverage report for the integrationTest task.'
    group = 'verification'

    dependsOn integrationTests

    sourceSets sourceSets.main
    executionData integrationTests
    mustRunAfter integrationTests

    reports {
        xml.required = true
    }

}

tasks.register('unitTestsCoverageReport', JacocoReport) {
    description = 'Generates code coverage report for the test task.'
    group = 'verification'

    dependsOn test

    sourceSets sourceSets.main
    executionData test
    mustRunAfter test

    reports {
        xml.required = true
    }

}

test {
    useJUnitPlatform()
    finalizedBy unitTestsCoverageReport

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
    }
}

check.dependsOn integrationTests


