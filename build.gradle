plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id "io.freefair.lombok" version "6.4.3"
}

group = 'io.javalin'
//Must be formatted following the RegEx: /version\s*=\s*'\S+'/g
version = '5.0.0.RC2'

jacoco {
    toolVersion = "0.8.8"
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.reposilite.com/snapshots" //Javalin Snapshots
    }
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/intTest/java'
        }
        resources {
            srcDir 'src/intTest/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    def javalin = "5.0.0.RC2"
    def jetty = '11.0.11'
    def junit = '5.9.0'
    def sslContextKickstart = '7.4.5'
    def okhttp = "4.10.0"

    compileOnly("io.javalin:javalin-bundle:$javalin")

    //implementation("org.eclipse.jetty.http3:http3-server:$jetty")
    implementation("io.github.hakky54:sslcontext-kickstart:$sslContextKickstart")
    implementation("io.github.hakky54:sslcontext-kickstart-for-jetty:$sslContextKickstart")
    implementation("io.github.hakky54:sslcontext-kickstart-for-pem:$sslContextKickstart")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit")

    integrationTestImplementation("org.junit.jupiter:junit-jupiter-api:$junit")
    integrationTestImplementation("io.javalin:javalin-bundle:$javalin")
    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart:$sslContextKickstart")
    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart-for-jetty:$sslContextKickstart")
    integrationTestImplementation("io.github.hakky54:sslcontext-kickstart-for-pem:$sslContextKickstart")
    integrationTestImplementation("com.squareup.okhttp3:okhttp:$okhttp")
    integrationTestImplementation("com.squareup.okhttp3:okhttp-tls:$okhttp")
    integrationTestImplementation('org.slf4j:slf4j-simple:2.0.0')

    integrationTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit")
}

publishing {
    repositories {
        maven {
            name = "zugazagoitia-repo"

            def releasesRepoUrl = uri("https://repo.zugazagoitia.com/releases")
            def snapshotsRepoUrl = uri("https://repo.zugazagoitia.com/snapshots")

            url = version.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("MAVEN_NAME") ?: property("mavenUser").toString()
                password = System.getenv("MAVEN_TOKEN") ?: property("mavenPassword").toString()
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = rootProject.name
            version = project.version

            from components.java
        }
    }
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

tasks.register("integrationTests", Test) {
    description = 'Runs the integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter test

    outputs.upToDateWhen { false }

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
    }

    useJUnitPlatform {
        includeTags "integration"
    }

    finalizedBy integrationTestsCoverageReport

}

tasks.register('integrationTestsCoverageReport', JacocoReport) {
    description = 'Generates code coverage report for the integrationTest task.'
    group = 'verification'

    dependsOn integrationTests

    sourceSets sourceSets.main
    executionData integrationTests
    mustRunAfter integrationTests

    reports {
        xml.required = true
    }

}

tasks.register('unitTestsCoverageReport', JacocoReport) {
    description = 'Generates code coverage report for the test task.'
    group = 'verification'

    dependsOn test

    sourceSets sourceSets.main
    executionData test
    mustRunAfter test

    reports {
        xml.required = true
    }

}

test {
    useJUnitPlatform()
    finalizedBy unitTestsCoverageReport

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
    }
}

check.dependsOn integrationTests


